
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  000002e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000085f  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d6  00000000  00000000  00000beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000314  00000000  00000000  000012c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d9  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019d  00000000  00000000  00001a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001bc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 08 01 	call	0x210	; 0x210 <main>
  9e:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_13>:
volatile uint8_t seconds = 0;
volatile uint8_t minutes = 0;
volatile uint8_t paused = 0;

// Timer1 overflow interrupt service routine
ISR(TIMER1_OVF_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	if (!paused) {
  b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  b6:	81 11       	cpse	r24, r1
  b8:	16 c0       	rjmp	.+44     	; 0xe6 <__vector_13+0x40>
		seconds++;
  ba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <seconds>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <seconds>
		if (seconds >= 60) {
  c4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <seconds>
  c8:	8c 33       	cpi	r24, 0x3C	; 60
  ca:	68 f0       	brcs	.+26     	; 0xe6 <__vector_13+0x40>
			seconds = 0;
  cc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <seconds>
			minutes++;
  d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <minutes>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <minutes>
			if (minutes >= 60) {
  da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <minutes>
  de:	8c 33       	cpi	r24, 0x3C	; 60
  e0:	10 f0       	brcs	.+4      	; 0xe6 <__vector_13+0x40>
				minutes = 0;
  e2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <minutes>
			}
		}
	}
}
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_2>:

// External interrupt 1 service routine
ISR(INT1_vect) {
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	paused = !paused;
 100:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	91 11       	cpse	r25, r1
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <display_time>:

void display_time() {
	// Display the minutes
	PORTD = (PORTD & 0x0F) | (segment_codes[minutes / 10] << 4);
 11c:	4b b1       	in	r20, 0x0b	; 11
 11e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <minutes>
 122:	8d ec       	ldi	r24, 0xCD	; 205
 124:	e8 9f       	mul	r30, r24
 126:	e1 2d       	mov	r30, r1
 128:	11 24       	eor	r1, r1
 12a:	e6 95       	lsr	r30
 12c:	e6 95       	lsr	r30
 12e:	e6 95       	lsr	r30
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	e0 50       	subi	r30, 0x00	; 0
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	90 81       	ld	r25, Z
 138:	50 e1       	ldi	r21, 0x10	; 16
 13a:	95 9f       	mul	r25, r21
 13c:	90 01       	movw	r18, r0
 13e:	11 24       	eor	r1, r1
 140:	94 2f       	mov	r25, r20
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	29 2b       	or	r18, r25
 146:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	e1 ee       	ldi	r30, 0xE1	; 225
 14a:	f4 e0       	ldi	r31, 0x04	; 4
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <display_time+0x30>
 150:	00 c0       	rjmp	.+0      	; 0x152 <display_time+0x36>
 152:	00 00       	nop
	_delay_ms(5);
	PORTD = (PORTD & 0x0F) | (segment_codes[minutes % 10] << 4);
 154:	4b b1       	in	r20, 0x0b	; 11
 156:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <minutes>
 15a:	e8 9f       	mul	r30, r24
 15c:	91 2d       	mov	r25, r1
 15e:	11 24       	eor	r1, r1
 160:	96 95       	lsr	r25
 162:	96 95       	lsr	r25
 164:	96 95       	lsr	r25
 166:	99 0f       	add	r25, r25
 168:	29 2f       	mov	r18, r25
 16a:	22 0f       	add	r18, r18
 16c:	22 0f       	add	r18, r18
 16e:	92 0f       	add	r25, r18
 170:	e9 1b       	sub	r30, r25
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	e0 50       	subi	r30, 0x00	; 0
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	90 81       	ld	r25, Z
 17a:	f0 e1       	ldi	r31, 0x10	; 16
 17c:	9f 9f       	mul	r25, r31
 17e:	90 01       	movw	r18, r0
 180:	11 24       	eor	r1, r1
 182:	94 2f       	mov	r25, r20
 184:	9f 70       	andi	r25, 0x0F	; 15
 186:	29 2b       	or	r18, r25
 188:	2b b9       	out	0x0b, r18	; 11
 18a:	e1 ee       	ldi	r30, 0xE1	; 225
 18c:	f4 e0       	ldi	r31, 0x04	; 4
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <display_time+0x72>
 192:	00 c0       	rjmp	.+0      	; 0x194 <display_time+0x78>
 194:	00 00       	nop
	_delay_ms(5);

	// Display the seconds
	PORTD = (PORTD & 0x0F) | (segment_codes[seconds / 10] << 4);
 196:	4b b1       	in	r20, 0x0b	; 11
 198:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <seconds>
 19c:	e8 9f       	mul	r30, r24
 19e:	e1 2d       	mov	r30, r1
 1a0:	11 24       	eor	r1, r1
 1a2:	e6 95       	lsr	r30
 1a4:	e6 95       	lsr	r30
 1a6:	e6 95       	lsr	r30
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	e0 50       	subi	r30, 0x00	; 0
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	90 81       	ld	r25, Z
 1b0:	f0 e1       	ldi	r31, 0x10	; 16
 1b2:	9f 9f       	mul	r25, r31
 1b4:	90 01       	movw	r18, r0
 1b6:	11 24       	eor	r1, r1
 1b8:	94 2f       	mov	r25, r20
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	29 2b       	or	r18, r25
 1be:	2b b9       	out	0x0b, r18	; 11
 1c0:	e1 ee       	ldi	r30, 0xE1	; 225
 1c2:	f4 e0       	ldi	r31, 0x04	; 4
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <display_time+0xa8>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <display_time+0xae>
 1ca:	00 00       	nop
	_delay_ms(5);
	PORTD = (PORTD & 0x0F) | (segment_codes[seconds % 10] << 4);
 1cc:	2b b1       	in	r18, 0x0b	; 11
 1ce:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <seconds>
 1d2:	e8 9f       	mul	r30, r24
 1d4:	81 2d       	mov	r24, r1
 1d6:	11 24       	eor	r1, r1
 1d8:	86 95       	lsr	r24
 1da:	86 95       	lsr	r24
 1dc:	86 95       	lsr	r24
 1de:	88 0f       	add	r24, r24
 1e0:	98 2f       	mov	r25, r24
 1e2:	99 0f       	add	r25, r25
 1e4:	99 0f       	add	r25, r25
 1e6:	89 0f       	add	r24, r25
 1e8:	e8 1b       	sub	r30, r24
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	e0 50       	subi	r30, 0x00	; 0
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	90 81       	ld	r25, Z
 1f2:	f0 e1       	ldi	r31, 0x10	; 16
 1f4:	9f 9f       	mul	r25, r31
 1f6:	c0 01       	movw	r24, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	92 2f       	mov	r25, r18
 1fc:	9f 70       	andi	r25, 0x0F	; 15
 1fe:	89 2b       	or	r24, r25
 200:	8b b9       	out	0x0b, r24	; 11
 202:	81 ee       	ldi	r24, 0xE1	; 225
 204:	94 e0       	ldi	r25, 0x04	; 4
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <display_time+0xea>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <display_time+0xf0>
 20c:	00 00       	nop
 20e:	08 95       	ret

00000210 <main>:
	_delay_ms(5);
}

int main(void) {
	// Set PORTD as output
	DDRD = 0xFF;
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	8a b9       	out	0x0a, r24	; 10

	// Initialize Timer1
	TCCR1B |= (1 << CS12);  // Set prescaler to 256
 214:	e1 e8       	ldi	r30, 0x81	; 129
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	84 60       	ori	r24, 0x04	; 4
 21c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << TOIE1);  // Enable Timer1 overflow interrupt
 21e:	ef e6       	ldi	r30, 0x6F	; 111
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	81 60       	ori	r24, 0x01	; 1
 226:	80 83       	st	Z, r24

	// Initialize external interrupt 1
	EICRA |= (1 << ISC10);  // Trigger on any logical change
 228:	e9 e6       	ldi	r30, 0x69	; 105
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	84 60       	ori	r24, 0x04	; 4
 230:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);  // Enable external interrupt 1
 232:	8d b3       	in	r24, 0x1d	; 29
 234:	82 60       	ori	r24, 0x02	; 2
 236:	8d bb       	out	0x1d, r24	; 29

	sei();  // Enable global interrupts
 238:	78 94       	sei

	while (1) {
		display_time();
 23a:	0e 94 8e 00 	call	0x11c	; 0x11c <display_time>
 23e:	fd cf       	rjmp	.-6      	; 0x23a <main+0x2a>

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
