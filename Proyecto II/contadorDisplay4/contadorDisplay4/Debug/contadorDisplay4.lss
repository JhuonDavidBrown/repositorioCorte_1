
contadorDisplay4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000382  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008da  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ba  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c9  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000150  00000000  00000000  00001f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000020ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_1>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  9e:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z7Displayv>:
		//asm("NOP");
    }
}
void Display(void){
	static uint8_t Cont = 0;
	if(!stop)
  a6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <stop>
  aa:	81 11       	cpse	r24, r1
  ac:	45 c0       	rjmp	.+138    	; 0x138 <_Z7Displayv+0x92>
	{
		if (++Cont == 1)
  ae:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_ZZ7DisplayvE4Cont>
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_ZZ7DisplayvE4Cont>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	61 f4       	brne	.+24     	; 0xd4 <_Z7Displayv+0x2e>
		{
			PORTD |= 0b10000000;//PD7 = 1: Inactiva DispM
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	8b b9       	out	0x0b, r24	; 11
			PORTB = (PORTB & 0xF0) |unidades; //Refresca Unidades
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	80 7f       	andi	r24, 0xF0	; 240
  c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <unidades>
  ca:	89 2b       	or	r24, r25
  cc:	85 b9       	out	0x05, r24	; 5
			PORTD &= 0b11101111; //PD4 = 0: Activa DispU
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	8b b9       	out	0x0b, r24	; 11
		}
		if (Cont == 2)
  d4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_ZZ7DisplayvE4Cont>
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	61 f4       	brne	.+24     	; 0xf4 <_Z7Displayv+0x4e>
		{
			PORTD |= 0b00010000;//PD4 = 1: Inactiva DispU
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	8b b9       	out	0x0b, r24	; 11
			PORTB = (PORTB & 0xF0) |decenas; //Refresca Decenas
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <decenas>
  ea:	89 2b       	or	r24, r25
  ec:	85 b9       	out	0x05, r24	; 5
			PORTD &= 0b11011111; //PD5 = 0: Activa DispD
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	8b b9       	out	0x0b, r24	; 11
		}
		if (Cont == 3)
  f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_ZZ7DisplayvE4Cont>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	61 f4       	brne	.+24     	; 0x114 <_Z7Displayv+0x6e>
		{
			PORTD |= 0b00100000;//PD5 = 1: Inactiva DispD
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	8b b9       	out	0x0b, r24	; 11
			PORTB = (PORTB & 0XF0) |centenas; //Refresca Centenas
 102:	85 b1       	in	r24, 0x05	; 5
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <centenas>
 10a:	89 2b       	or	r24, r25
 10c:	85 b9       	out	0x05, r24	; 5
			PORTD &= 0b10111111; //PD6 = 0: Activa Dispc
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	8f 7b       	andi	r24, 0xBF	; 191
 112:	8b b9       	out	0x0b, r24	; 11
		}
		if (Cont == 4)
 114:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_ZZ7DisplayvE4Cont>
 118:	84 30       	cpi	r24, 0x04	; 4
 11a:	71 f4       	brne	.+28     	; 0x138 <_Z7Displayv+0x92>
		{
			PORTD |= 0b01000000; //PD6 = 1: Inactiva DispC
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	8b b9       	out	0x0b, r24	; 11
			PORTB = (PORTB & 0xF0) |miles; //Refresca DispM
 122:	85 b1       	in	r24, 0x05	; 5
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	89 2b       	or	r24, r25
 12c:	85 b9       	out	0x05, r24	; 5
			PORTD &= 0b01111111; //PD7 = 1: Activa DispM
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
			Cont = 0;
 134:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_ZZ7DisplayvE4Cont>
 138:	08 95       	ret

0000013a <_Z5Relojv>:
		}
	}
	
}
void Reloj(void){
	if (++unidades == 10)
 13a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <unidades>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <unidades>
 144:	8a 30       	cpi	r24, 0x0A	; 10
 146:	e9 f4       	brne	.+58     	; 0x182 <_Z5Relojv+0x48>
	{
		unidades = 0;
 148:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <unidades>
		if (++decenas == 6)
 14c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <decenas>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <decenas>
 156:	86 30       	cpi	r24, 0x06	; 6
 158:	a1 f4       	brne	.+40     	; 0x182 <_Z5Relojv+0x48>
		{
			decenas = 0;
 15a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <decenas>
			if (++centenas == 10)
 15e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <centenas>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <centenas>
 168:	8a 30       	cpi	r24, 0x0A	; 10
 16a:	59 f4       	brne	.+22     	; 0x182 <_Z5Relojv+0x48>
			{
				centenas = 0;
 16c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <centenas>
				if (++miles == 10)
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	8a 30       	cpi	r24, 0x0A	; 10
 17c:	11 f4       	brne	.+4      	; 0x182 <_Z5Relojv+0x48>
				{
					miles = 0;
 17e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	08 95       	ret

00000184 <__vector_16>:
				}
			}	
		}	
	}	
}
ISR(TIMER0_OVF_vect){
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	static uint8_t Cont = 0;
	TCNT0 =131; //valor inicial TMR0
 1a6:	83 e8       	ldi	r24, 0x83	; 131
 1a8:	86 bd       	out	0x26, r24	; 38
	if(++Cont == 250) // 1/4ms =250
 1aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1b4:	8a 3f       	cpi	r24, 0xFA	; 250
 1b6:	31 f4       	brne	.+12     	; 0x1c4 <__vector_16+0x40>
	{
		Reloj();
 1b8:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z5Relojv>
		PORTC ^= 0b00000100; //D3(PC2) conmuta cada segundo	
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	89 27       	eor	r24, r25
 1c2:	88 b9       	out	0x08, r24	; 8
	}
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_1>:
ISR(INT0_vect){
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
	
	if ((PIND & (1 << PD2)) == Op) {
 1f4:	4a 99       	sbic	0x09, 2	; 9
 1f6:	0f c0       	rjmp	.+30     	; 0x216 <__vector_1+0x30>
		togg = !togg; // Cambiar el estado de togg
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <togg>
 1fe:	91 11       	cpse	r25, r1
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <togg>
		if (togg) {
 206:	88 23       	and	r24, r24
 208:	21 f0       	breq	.+8      	; 0x212 <__vector_1+0x2c>
			stop = 1; // Detener el contador del display
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <stop>
 210:	02 c0       	rjmp	.+4      	; 0x216 <__vector_1+0x30>
			} else {
			stop = 0; // Reanudar el contador del display
 212:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <stop>
		}
	}
}
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__vector_2>:
ISR(INT1_vect){
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
	if ((PIND & 0b00001000) == Op)
 230:	4b 99       	sbic	0x09, 3	; 9
 232:	0f c0       	rjmp	.+30     	; 0x252 <__vector_2+0x2e>
	{
		PORTC = 0b00000111;
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	88 b9       	out	0x08, r24	; 8
		ContD2D3 = 0;
 238:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ContD2D3+0x1>
 23c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ContD2D3>
		if (++Modo == 4) Modo = 0;
 240:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Modo>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Modo>
 24a:	84 30       	cpi	r24, 0x04	; 4
 24c:	11 f4       	brne	.+4      	; 0x252 <__vector_2+0x2e>
 24e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Modo>
	}
}
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <_Z10ConfigINT0v>:
void ConfigINT0(void){
	#warning "Borre comentario de la OPCION requerida."
	//EICRA &= 0b11111100; //Nivel bajo
	//EICRA = (EICRA & 0b11111100)|0b00000001; //Todo flanco
	EICRA = (EICRA & 0b11111100)|0b00000010; //Flanco caída
 25e:	e9 e6       	ldi	r30, 0x69	; 105
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	8c 7f       	andi	r24, 0xFC	; 252
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
	//EICRA = (EICRA & 0b11111100)|0b00000011; //flanco subida
	EIFR &= 0b11111110; //INTF0 = 0 (flag de IRQ)
 26a:	8c b3       	in	r24, 0x1c	; 28
 26c:	8e 7f       	andi	r24, 0xFE	; 254
 26e:	8c bb       	out	0x1c, r24	; 28
	EIMSK |= 0b00000001; //INT0 = 1 (Habilitación particular)
 270:	8d b3       	in	r24, 0x1d	; 29
 272:	81 60       	ori	r24, 0x01	; 1
 274:	8d bb       	out	0x1d, r24	; 29
	sei(); //I=1 (Habilitación global)
 276:	78 94       	sei
 278:	08 95       	ret

0000027a <_Z10ConfigINT1v>:
}
void ConfigINT1(void){
	#warning "Borre comentario de la OPCION requerida."
	//EICRA &= 0b11111100; //Nivel bajo
	//EICRA = (EICRA & 0b11111100)|0b00000001; //Todo flanco
	EICRA = (EICRA & 0b11111100)|0b00000010; //Flanco caída
 27a:	e9 e6       	ldi	r30, 0x69	; 105
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	8c 7f       	andi	r24, 0xFC	; 252
 282:	82 60       	ori	r24, 0x02	; 2
 284:	80 83       	st	Z, r24
	//EICRA = (EICRA & 0b11111100)|0b00000011; //flanco subida
	EIFR &= 0b11111110; //INTF0 = 0 (flag de IRQ)
 286:	8c b3       	in	r24, 0x1c	; 28
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	8c bb       	out	0x1c, r24	; 28
	EIMSK |= 0b00000010; //INT1 = 1 (Habilitación particular)
 28c:	8d b3       	in	r24, 0x1d	; 29
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	8d bb       	out	0x1d, r24	; 29
	sei(); //I=1 (Habilitación global)
 292:	78 94       	sei
 294:	08 95       	ret

00000296 <_Z10ConfigTMR0v>:
	//TCCR0B =0x00; //Modo STOP
	//TCCR0B =0b0000 0001; //FM = 1
	//TCCR0B =0b0000 0010; //FM = 8
	//TCCR0B =0b0000 0011; //FM = 64
	//TCCR0B =0b0000 0100; //FM = 256
	TCCR0B =0b00000101; //FM = 1024
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	85 bd       	out	0x25, r24	; 37
	#warning "C: Cargue la cuenta "
	TCNT0 = 131; //Cuenta del TMR0
 29a:	83 e8       	ldi	r24, 0x83	; 131
 29c:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= 0b00000001; //Habilitacion particular
 29e:	ee e6       	ldi	r30, 0x6E	; 110
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	80 83       	st	Z, r24
	sei(); //Habilitacion global
 2a8:	78 94       	sei
 2aa:	08 95       	ret

000002ac <main>:
uint8_t stop = 0;
uint8_t togg = 0;

int main(void)
{
	DDRB |= 0b00001111; //bit pb0-pb3 como salida
 2ac:	84 b1       	in	r24, 0x04	; 4
 2ae:	8f 60       	ori	r24, 0x0F	; 15
 2b0:	84 b9       	out	0x04, r24	; 4
	
	DDRC |= 0b00000111; //bit pc0-pc2 como salida (3leds)
 2b2:	87 b1       	in	r24, 0x07	; 7
 2b4:	87 60       	ori	r24, 0x07	; 7
 2b6:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0b00000111;//los 3 leds encendidos
 2b8:	88 b1       	in	r24, 0x08	; 8
 2ba:	87 60       	ori	r24, 0x07	; 7
 2bc:	88 b9       	out	0x08, r24	; 8
	
	DDRD &= 0b11110011;//pd3(int1)y pd2(int0)definido como entrada
 2be:	8a b1       	in	r24, 0x0a	; 10
 2c0:	83 7f       	andi	r24, 0xF3	; 243
 2c2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b00001100;//pull up activado
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	8c 60       	ori	r24, 0x0C	; 12
 2c8:	8b b9       	out	0x0b, r24	; 11
	
	DDRD |= 0b11110000;//pd4-pd7 como salida
 2ca:	8a b1       	in	r24, 0x0a	; 10
 2cc:	80 6f       	ori	r24, 0xF0	; 240
 2ce:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b11110000;//pull up activado
 2d0:	8b b1       	in	r24, 0x0b	; 11
 2d2:	80 6f       	ori	r24, 0xF0	; 240
 2d4:	8b b9       	out	0x0b, r24	; 11
	
	DDRC |= 0b00000111;		//Configura: PC2-PC0 = Out
 2d6:	87 b1       	in	r24, 0x07	; 7
 2d8:	87 60       	ori	r24, 0x07	; 7
 2da:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0b00000111;	//LED3-LED1 (PC2-PC0) = 1 (encendidos)
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	87 60       	ori	r24, 0x07	; 7
 2e0:	88 b9       	out	0x08, r24	; 8
	ConfigINT1();
 2e2:	0e 94 3d 01 	call	0x27a	; 0x27a <_Z10ConfigINT1v>
	ConfigINT0();
 2e6:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z10ConfigINT0v>
	ConfigTMR0();
 2ea:	0e 94 4b 01 	call	0x296	; 0x296 <_Z10ConfigTMR0v>
	
    while (1) 
    {
		if (++ContD1 == 400)  //2s/5ms = 400
 2ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ContD1>
 2f2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ContD1+0x1>
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ContD1+0x1>
 2fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ContD1>
 300:	80 39       	cpi	r24, 0x90	; 144
 302:	91 40       	sbci	r25, 0x01	; 1
 304:	41 f4       	brne	.+16     	; 0x316 <main+0x6a>
		{
			PORTC ^= 0b00000001;  //Conmutar LED1
 306:	98 b1       	in	r25, 0x08	; 8
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	89 27       	eor	r24, r25
 30c:	88 b9       	out	0x08, r24	; 8
			ContD1 = 0;
 30e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ContD1+0x1>
 312:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ContD1>
		}
		ContD2D3++;
 316:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ContD2D3>
 31a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ContD2D3+0x1>
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ContD2D3+0x1>
 324:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ContD2D3>
		if (Modo == 1 && ContD2D3 == 300)  //1.5s/5ms = 300
 328:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <Modo>
 32c:	21 30       	cpi	r18, 0x01	; 1
 32e:	59 f4       	brne	.+22     	; 0x346 <main+0x9a>
 330:	8c 32       	cpi	r24, 0x2C	; 44
 332:	91 40       	sbci	r25, 0x01	; 1
 334:	41 f4       	brne	.+16     	; 0x346 <main+0x9a>
		{
			PORTC ^= 0b00000010;  //Conmutar LED2
 336:	98 b1       	in	r25, 0x08	; 8
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	89 27       	eor	r24, r25
 33c:	88 b9       	out	0x08, r24	; 8
			ContD2D3 = 0;
 33e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ContD2D3+0x1>
 342:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ContD2D3>
		}
		if (Modo == 2 && ContD2D3 == 300)  //1.5s/5ms = 300
 346:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Modo>
 34a:	82 30       	cpi	r24, 0x02	; 2
 34c:	79 f4       	brne	.+30     	; 0x36c <main+0xc0>
 34e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ContD2D3>
 352:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ContD2D3+0x1>
 356:	8c 32       	cpi	r24, 0x2C	; 44
 358:	91 40       	sbci	r25, 0x01	; 1
 35a:	41 f4       	brne	.+16     	; 0x36c <main+0xc0>
		{
			PORTC ^= 0b00000100;  //Conmutar LED3
 35c:	98 b1       	in	r25, 0x08	; 8
 35e:	84 e0       	ldi	r24, 0x04	; 4
 360:	89 27       	eor	r24, r25
 362:	88 b9       	out	0x08, r24	; 8
			ContD2D3 = 0;
 364:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ContD2D3+0x1>
 368:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ContD2D3>
		}
		Display();
 36c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z7Displayv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 370:	81 ee       	ldi	r24, 0xE1	; 225
 372:	94 e0       	ldi	r25, 0x04	; 4
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <main+0xc8>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0xce>
 37a:	00 00       	nop
 37c:	b8 cf       	rjmp	.-144    	; 0x2ee <main+0x42>

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
