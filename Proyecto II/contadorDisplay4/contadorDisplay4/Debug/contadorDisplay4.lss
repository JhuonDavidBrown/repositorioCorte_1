
contadorDisplay4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003c6  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d6  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e8  00000000  00000000  0000150a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a7  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d2  00000000  00000000  00001fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000021b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_1>
   8:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  9e:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z7Displayv>:
    }
}

void Display(void){
	static uint8_t Cont = 0;
	if (++Cont == 1)
  a6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_ZZ7DisplayvE4Cont>
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_ZZ7DisplayvE4Cont>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	61 f4       	brne	.+24     	; 0xcc <_Z7Displayv+0x26>
	{
		
		PORTD |= 0b10000000;//PD7 = 1: Inactiva DispM
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	8b b9       	out	0x0b, r24	; 11
		PORTB = (PORTB & 0xF0) |unidades; //Refresca Unidades
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <unidades>
  c2:	89 2b       	or	r24, r25
  c4:	85 b9       	out	0x05, r24	; 5
		PORTD &= 0b11101111; //PD4 = 0: Activa DispU
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	8f 7e       	andi	r24, 0xEF	; 239
  ca:	8b b9       	out	0x0b, r24	; 11
	}
	
	if (Cont == 2)
  cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_ZZ7DisplayvE4Cont>
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	61 f4       	brne	.+24     	; 0xec <_Z7Displayv+0x46>
	{
		
		
		PORTD |= 0b00010000;
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	8b b9       	out	0x0b, r24	; 11
		//PD4 = 1: Inactiva DispU
		PORTB = (PORTB & 0xF0) |decenas; //Refresca Decenas
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	80 7f       	andi	r24, 0xF0	; 240
  de:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <decenas>
  e2:	89 2b       	or	r24, r25
  e4:	85 b9       	out	0x05, r24	; 5
		PORTD &= 0b11011111; //PD5 = 0: Activa DispD
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	8f 7d       	andi	r24, 0xDF	; 223
  ea:	8b b9       	out	0x0b, r24	; 11
	}
	if (Cont == 3)
  ec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_ZZ7DisplayvE4Cont>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	61 f4       	brne	.+24     	; 0x10c <_Z7Displayv+0x66>
	{
		
		PORTD |= 0b00100000;
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	8b b9       	out	0x0b, r24	; 11
		//PD5 = 1: Inactiva DispD
		PORTB = (PORTB & 0XF0) |centenas; //Refresca Centenas
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <centenas>
 102:	89 2b       	or	r24, r25
 104:	85 b9       	out	0x05, r24	; 5
		PORTD &= 0b10111111; //PD6 = 0: Activa Dispc
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	8b b9       	out	0x0b, r24	; 11
	}
	if (Cont == 4)
 10c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_ZZ7DisplayvE4Cont>
 110:	84 30       	cpi	r24, 0x04	; 4
 112:	71 f4       	brne	.+28     	; 0x130 <_Z7Displayv+0x8a>
	{
		PORTD |= 0b01000000; //PD6 = 1: Inactiva DispC
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	80 64       	ori	r24, 0x40	; 64
 118:	8b b9       	out	0x0b, r24	; 11
		PORTB = (PORTB & 0xF0) |miles; //Refresca DispM
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	89 2b       	or	r24, r25
 124:	85 b9       	out	0x05, r24	; 5
		PORTD &= 0b01111111; //PD7 = 1: Activa DispM
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	8f 77       	andi	r24, 0x7F	; 127
 12a:	8b b9       	out	0x0b, r24	; 11
		Cont = 0;
 12c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_ZZ7DisplayvE4Cont>
 130:	08 95       	ret

00000132 <_Z5Relojv>:
	}
	
}
void Reloj(void){
	if (++unidades == 10)
 132:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <unidades>
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <unidades>
 13c:	8a 30       	cpi	r24, 0x0A	; 10
 13e:	e9 f4       	brne	.+58     	; 0x17a <_Z5Relojv+0x48>
	{
		unidades = 0;
 140:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <unidades>
		if (++decenas == 6)
 144:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <decenas>
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <decenas>
 14e:	86 30       	cpi	r24, 0x06	; 6
 150:	a1 f4       	brne	.+40     	; 0x17a <_Z5Relojv+0x48>
		{
			decenas = 0;
 152:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <decenas>
			if (++centenas == 10)
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <centenas>
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <centenas>
 160:	8a 30       	cpi	r24, 0x0A	; 10
 162:	59 f4       	brne	.+22     	; 0x17a <_Z5Relojv+0x48>
			{
				centenas = 0;
 164:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <centenas>
				if (++miles == 10)
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	8a 30       	cpi	r24, 0x0A	; 10
 174:	11 f4       	brne	.+4      	; 0x17a <_Z5Relojv+0x48>
				{
					miles = 0;
 176:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	08 95       	ret

0000017c <_Z10ConfigINT0v>:
}
void ConfigINT0(void){
	#warning "Borre comentario de la OPCION requerida."
	//EICRA &= 0b11111100; //Nivel bajo
	//EICRA = (EICRA & 0b11111100)|0b00000001; //Todo flanco
	EICRA = (EICRA & 0b11111100)|0b00000010; //Flanco caída
 17c:	e9 e6       	ldi	r30, 0x69	; 105
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8c 7f       	andi	r24, 0xFC	; 252
 184:	82 60       	ori	r24, 0x02	; 2
 186:	80 83       	st	Z, r24
	//EICRA = (EICRA & 0b11111100)|0b00000011; //flanco subida
	EIFR &= 0b11111110; //INTF0 = 0 (flag de IRQ)
 188:	8c b3       	in	r24, 0x1c	; 28
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	8c bb       	out	0x1c, r24	; 28
	EIMSK |= 0b00000001; //INT0 = 1 (Habilitación particular)
 18e:	8d b3       	in	r24, 0x1d	; 29
 190:	81 60       	ori	r24, 0x01	; 1
 192:	8d bb       	out	0x1d, r24	; 29
	sei(); //I=1 (Habilitación global)
 194:	78 94       	sei
 196:	08 95       	ret

00000198 <_Z10ConfigINT1v>:
}
void ConfigINT1(void){
	#warning "Borre comentario de la OPCION requerida."
	//EICRA &= 0b11111100; //Nivel bajo
	//EICRA = (EICRA & 0b11111100)|0b00000001; //Todo flanco
	EICRA = (EICRA & 0b11111100)|0b00000010; //Flanco caída
 198:	e9 e6       	ldi	r30, 0x69	; 105
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8c 7f       	andi	r24, 0xFC	; 252
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	80 83       	st	Z, r24
	//EICRA = (EICRA & 0b11111100)|0b00000011; //flanco subida
	EIFR &= 0b11111110; //INTF0 = 0 (flag de IRQ)
 1a4:	8c b3       	in	r24, 0x1c	; 28
 1a6:	8e 7f       	andi	r24, 0xFE	; 254
 1a8:	8c bb       	out	0x1c, r24	; 28
	EIMSK |= 0b00000010; //INT1 = 1 (Habilitación particular)
 1aa:	8d b3       	in	r24, 0x1d	; 29
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	8d bb       	out	0x1d, r24	; 29
	sei(); //I=1 (Habilitación global)
 1b0:	78 94       	sei
 1b2:	08 95       	ret

000001b4 <_Z10ConfigTMR0v>:
	//TCCR0B =0x00; //Modo STOP
	//TCCR0B =0b0000 0001; //FM = 1
	//TCCR0B =0b0000 0010; //FM = 8
	//TCCR0B =0b0000 0011; //FM = 64
	//TCCR0B =0b0000 0100; //FM = 256
	TCCR0B =0b00000101; //FM = 1024
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	85 bd       	out	0x25, r24	; 37
	#warning "C: Cargue la cuenta "
	TCNT0 = 131; //Cuenta del TMR0
 1b8:	83 e8       	ldi	r24, 0x83	; 131
 1ba:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= 0b00000001; //Habilitacion particular
 1bc:	ee e6       	ldi	r30, 0x6E	; 110
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	80 83       	st	Z, r24
	sei(); //Habilitacion global
 1c6:	78 94       	sei
 1c8:	08 95       	ret

000001ca <main>:
void Reloj(void);
void ConfigTMR0(void);

int main(void)
{
	DDRB |= 0b00001111;
 1ca:	84 b1       	in	r24, 0x04	; 4
 1cc:	8f 60       	ori	r24, 0x0F	; 15
 1ce:	84 b9       	out	0x04, r24	; 4
	
	DDRC |= 0b00000111;
 1d0:	87 b1       	in	r24, 0x07	; 7
 1d2:	87 60       	ori	r24, 0x07	; 7
 1d4:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0b00000111;
 1d6:	88 b1       	in	r24, 0x08	; 8
 1d8:	87 60       	ori	r24, 0x07	; 7
 1da:	88 b9       	out	0x08, r24	; 8
	
	DDRD &= 0b11110011;
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	83 7f       	andi	r24, 0xF3	; 243
 1e0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b00001100;
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	8c 60       	ori	r24, 0x0C	; 12
 1e6:	8b b9       	out	0x0b, r24	; 11
	
	DDRD |= 0b11110000;
 1e8:	8a b1       	in	r24, 0x0a	; 10
 1ea:	80 6f       	ori	r24, 0xF0	; 240
 1ec:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b11110000;
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	80 6f       	ori	r24, 0xF0	; 240
 1f2:	8b b9       	out	0x0b, r24	; 11
	
	DDRC |= 0b00000111;		//Configura: PC2-PC0 = Out
 1f4:	87 b1       	in	r24, 0x07	; 7
 1f6:	87 60       	ori	r24, 0x07	; 7
 1f8:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0b00000111;	//LED3-LED1 (PC2-PC0) = 1 (encendidos)
 1fa:	88 b1       	in	r24, 0x08	; 8
 1fc:	87 60       	ori	r24, 0x07	; 7
 1fe:	88 b9       	out	0x08, r24	; 8
	
	DDRD &= 0b11111011;		//Configura: PD2/INT0 = In
 200:	8a b1       	in	r24, 0x0a	; 10
 202:	8b 7f       	andi	r24, 0xFB	; 251
 204:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0b00000100;	//Configura: PD2 con pull up
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	84 60       	ori	r24, 0x04	; 4
 20a:	8b b9       	out	0x0b, r24	; 11
	
	
	ConfigINT1();
 20c:	0e 94 cc 00 	call	0x198	; 0x198 <_Z10ConfigINT1v>
	ConfigINT0();
 210:	0e 94 be 00 	call	0x17c	; 0x17c <_Z10ConfigINT0v>
	ConfigTMR0();
 214:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z10ConfigTMR0v>
	
	
    while (1) 
    {
		if (++ContD1 == 400)  //2s/5ms = 400
 218:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ContD1>
 21c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ContD1+0x1>
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ContD1+0x1>
 226:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ContD1>
 22a:	80 39       	cpi	r24, 0x90	; 144
 22c:	91 40       	sbci	r25, 0x01	; 1
 22e:	41 f4       	brne	.+16     	; 0x240 <main+0x76>
		{
			PORTC ^= 0b00000001;  //~LED1
 230:	98 b1       	in	r25, 0x08	; 8
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	89 27       	eor	r24, r25
 236:	88 b9       	out	0x08, r24	; 8
			ContD1 = 0;
 238:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ContD1+0x1>
 23c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ContD1>
		}

		ContD2D3++;
 240:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ContD2D3>
 244:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ContD2D3+0x1>
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ContD2D3+0x1>
 24e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ContD2D3>
		
		if (Modo == 1 && ContD2D3 == 300)  //1.5s/5ms = 300
 252:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <Modo>
 256:	21 30       	cpi	r18, 0x01	; 1
 258:	59 f4       	brne	.+22     	; 0x270 <main+0xa6>
 25a:	8c 32       	cpi	r24, 0x2C	; 44
 25c:	91 40       	sbci	r25, 0x01	; 1
 25e:	41 f4       	brne	.+16     	; 0x270 <main+0xa6>
		{
			PORTC ^= 0b00000010;  //~LED2
 260:	98 b1       	in	r25, 0x08	; 8
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	89 27       	eor	r24, r25
 266:	88 b9       	out	0x08, r24	; 8
			ContD2D3 = 0;
 268:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ContD2D3+0x1>
 26c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ContD2D3>
		}
		
		if (Modo == 2 && ContD2D3 == 300)  //1.5s/5ms = 300
 270:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Modo>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	79 f4       	brne	.+30     	; 0x296 <main+0xcc>
 278:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ContD2D3>
 27c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ContD2D3+0x1>
 280:	8c 32       	cpi	r24, 0x2C	; 44
 282:	91 40       	sbci	r25, 0x01	; 1
 284:	41 f4       	brne	.+16     	; 0x296 <main+0xcc>
		{
			PORTC ^= 0b00000100;  //~LED3
 286:	98 b1       	in	r25, 0x08	; 8
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	89 27       	eor	r24, r25
 28c:	88 b9       	out	0x08, r24	; 8
			ContD2D3 = 0;
 28e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ContD2D3+0x1>
 292:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ContD2D3>
		}
		
		Display();
 296:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z7Displayv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	81 ee       	ldi	r24, 0xE1	; 225
 29c:	94 e0       	ldi	r25, 0x04	; 4
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0xd4>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0xda>
 2a4:	00 00       	nop
 2a6:	b8 cf       	rjmp	.-144    	; 0x218 <main+0x4e>

000002a8 <__vector_16>:
	#warning "C: Cargue la cuenta "
	TCNT0 = 131; //Cuenta del TMR0
	TIMSK0 |= 0b00000001; //Habilitacion particular
	sei(); //Habilitacion global
}
ISR(TIMER0_OVF_vect){
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	static uint8_t Cont = 0;
	TCNT0 = 131;
 2ca:	83 e8       	ldi	r24, 0x83	; 131
 2cc:	86 bd       	out	0x26, r24	; 38
	if(++Cont == 250)
 2ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2d8:	8a 3f       	cpi	r24, 0xFA	; 250
 2da:	31 f4       	brne	.+12     	; 0x2e8 <__vector_16+0x40>
	{
		Reloj();
 2dc:	0e 94 99 00 	call	0x132	; 0x132 <_Z5Relojv>
		PORTC ^= 0b00000100;	
 2e0:	98 b1       	in	r25, 0x08	; 8
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	89 27       	eor	r24, r25
 2e6:	88 b9       	out	0x08, r24	; 8
	}
	
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_2>:

ISR(INT1_vect){
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	8f 93       	push	r24
	if ((PIND & 0b00001000) == Op) 
 316:	4b 99       	sbic	0x09, 3	; 9
 318:	0f c0       	rjmp	.+30     	; 0x338 <__vector_2+0x2e>
	{
		PORTC = 0b00000111;
 31a:	87 e0       	ldi	r24, 0x07	; 7
 31c:	88 b9       	out	0x08, r24	; 8
		ContD2D3 = 0;
 31e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ContD2D3+0x1>
 322:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ContD2D3>
		if (++Modo == 4) Modo = 0;
 326:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Modo>
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Modo>
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	11 f4       	brne	.+4      	; 0x338 <__vector_2+0x2e>
 334:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Modo>
	}
}
 338:	8f 91       	pop	r24
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <__vector_1>:

ISR(INT0_vect){
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
	if(Modo== 0)
 366:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Modo>
 36a:	81 11       	cpse	r24, r1
 36c:	09 c0       	rjmp	.+18     	; 0x380 <__vector_1+0x3c>
	{
		
		if ((PIND & 0b00000100) == Op)
 36e:	4a 99       	sbic	0x09, 2	; 9
 370:	07 c0       	rjmp	.+14     	; 0x380 <__vector_1+0x3c>
		{
			++modo;
 372:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <modo>
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <modo>
			Display();
 37c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z7Displayv>
			
		}
	}
	if(Modo==1 && (PIND & 0b00000100) == Op)
 380:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Modo>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	21 f4       	brne	.+8      	; 0x390 <__vector_1+0x4c>
 388:	4a 9b       	sbis	0x09, 2	; 9
 38a:	04 c0       	rjmp	.+8      	; 0x394 <__vector_1+0x50>
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	03 c0       	rjmp	.+6      	; 0x396 <__vector_1+0x52>
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	01 c0       	rjmp	.+2      	; 0x396 <__vector_1+0x52>
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	88 23       	and	r24, r24
 398:	19 f0       	breq	.+6      	; 0x3a0 <__vector_1+0x5c>
	{	modo=0;
 39a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <modo>
		while(PIND & 0b00000100 == Op);
 39e:	89 b1       	in	r24, 0x09	; 9
		
	}
	
	
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	bf 91       	pop	r27
 3a6:	af 91       	pop	r26
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	7f 91       	pop	r23
 3ae:	6f 91       	pop	r22
 3b0:	5f 91       	pop	r21
 3b2:	4f 91       	pop	r20
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
