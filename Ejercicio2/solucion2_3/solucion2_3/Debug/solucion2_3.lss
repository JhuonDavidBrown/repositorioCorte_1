
solucion2_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000792  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ac  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000334  00000000  00000000  000010ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 82 00 	call	0x104	; 0x104 <main>
  88:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z5modo1v>:
		_delay_ms(5);
	}
}

void modo1(void) {
	contadorD1++;
  90:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contadorD1>
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contadorD1>
	contadorD2++;
  9a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <contadorD2>
  9e:	9f 5f       	subi	r25, 0xFF	; 255
  a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <contadorD2>

	if (contadorD1 == 80) { // 0.4s
  a4:	80 35       	cpi	r24, 0x50	; 80
  a6:	31 f4       	brne	.+12     	; 0xb4 <_Z5modo1v+0x24>
		PORTD ^= (1<<led1); // Invertir el estado del LED1
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	89 27       	eor	r24, r25
  ae:	8b b9       	out	0x0b, r24	; 11
		contadorD1 = 0;
  b0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <contadorD1>
	}

	if (contadorD2 == 140) { // 0.7s
  b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contadorD2>
  b8:	8c 38       	cpi	r24, 0x8C	; 140
  ba:	31 f4       	brne	.+12     	; 0xc8 <_Z5modo1v+0x38>
		PORTD ^= (1<<led2); // Invertir el estado del LED2
  bc:	9b b1       	in	r25, 0x0b	; 11
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	89 27       	eor	r24, r25
  c2:	8b b9       	out	0x0b, r24	; 11
		contadorD2 = 0;
  c4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <contadorD2>
  c8:	08 95       	ret

000000ca <_Z5modo2v>:
	}
}

void modo2(void) {
	contadorD1++;
  ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contadorD1>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contadorD1>
	contadorD2++;
  d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <contadorD2>
  d8:	9f 5f       	subi	r25, 0xFF	; 255
  da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <contadorD2>

	if (contadorD1 == 180) { // 0.9s
  de:	84 3b       	cpi	r24, 0xB4	; 180
  e0:	31 f4       	brne	.+12     	; 0xee <_Z5modo2v+0x24>
		PORTD ^= (1<<led1); // Invertir el estado del LED1
  e2:	9b b1       	in	r25, 0x0b	; 11
  e4:	80 e4       	ldi	r24, 0x40	; 64
  e6:	89 27       	eor	r24, r25
  e8:	8b b9       	out	0x0b, r24	; 11
		contadorD1 = 0;
  ea:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <contadorD1>
	}

	if (contadorD2 == 40) { // 0.2s
  ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contadorD2>
  f2:	88 32       	cpi	r24, 0x28	; 40
  f4:	31 f4       	brne	.+12     	; 0x102 <_Z5modo2v+0x38>
		PORTD ^= (1<<led2); // Invertir el estado del LED2
  f6:	9b b1       	in	r25, 0x0b	; 11
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	89 27       	eor	r24, r25
  fc:	8b b9       	out	0x0b, r24	; 11
		contadorD2 = 0;
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <contadorD2>
 102:	08 95       	ret

00000104 <main>:

void modo1(void);
void modo2(void);

int main(void) {
	DDRD |= (1<<led1)|(1<<led2); // Definiendo puertos de los leds como salida
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	84 64       	ori	r24, 0x44	; 68
 108:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<led1)|(1<<led2)); // Apagar los LEDs inicialmente
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	8b 7b       	andi	r24, 0xBB	; 187
 10e:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0b11001111;
 110:	8f ec       	ldi	r24, 0xCF	; 207
 112:	87 b9       	out	0x07, r24	; 7

	while (1) {
		if ((PINC & (1<<pul1)) == op && (PINC & (1<<pul2)) != op) {
 114:	34 99       	sbic	0x06, 4	; 6
 116:	04 c0       	rjmp	.+8      	; 0x120 <main+0x1c>
 118:	35 99       	sbic	0x06, 5	; 6
 11a:	04 c0       	rjmp	.+8      	; 0x124 <main+0x20>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x22>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x22>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	88 23       	and	r24, r24
 128:	19 f0       	breq	.+6      	; 0x130 <main+0x2c>
			modo = 0; // Cambiar al modo1
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	09 c0       	rjmp	.+18     	; 0x142 <main+0x3e>
			} else if ((PINC & (1<<pul1)) != op && (PINC & (1<<pul2)) == op) {
 130:	34 9b       	sbis	0x06, 4	; 6
 132:	02 c0       	rjmp	.+4      	; 0x138 <main+0x34>
 134:	35 9b       	sbis	0x06, 5	; 6
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	88 23       	and	r24, r24
 13a:	19 f0       	breq	.+6      	; 0x142 <main+0x3e>
			modo = 1; // Cambiar al modo2
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}

		if (modo == 0) {
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 146:	81 11       	cpse	r24, r1
 148:	03 c0       	rjmp	.+6      	; 0x150 <main+0x4c>
			modo1();
 14a:	0e 94 48 00 	call	0x90	; 0x90 <_Z5modo1v>
 14e:	02 c0       	rjmp	.+4      	; 0x154 <main+0x50>
			} else {
			modo2();
 150:	0e 94 65 00 	call	0xca	; 0xca <_Z5modo2v>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	97 e2       	ldi	r25, 0x27	; 39
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x54>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x5a>
 15e:	00 00       	nop
 160:	d9 cf       	rjmp	.-78     	; 0x114 <main+0x10>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
