
solucion2_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000162  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b4  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ac  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ef  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  88:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z5modo1v>:
		bPul=1;
	}
}
void modo1(void)
{
	contadorD1++;
  90:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contadorD1>
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contadorD1>
	contadorD2++;
  9a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <contadorD2>
  9e:	9f 5f       	subi	r25, 0xFF	; 255
  a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <contadorD2>
	if(contadorD1==80){ //0.4s
  a4:	80 35       	cpi	r24, 0x50	; 80
  a6:	21 f4       	brne	.+8      	; 0xb0 <_Z5modo1v+0x20>
		PORTD =~(1<<led1);
  a8:	8f eb       	ldi	r24, 0xBF	; 191
  aa:	8b b9       	out	0x0b, r24	; 11
		contadorD1=0;
  ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <contadorD1>
	}
	if(contadorD2==140){ //0.7s
  b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contadorD2>
  b4:	8c 38       	cpi	r24, 0x8C	; 140
  b6:	21 f4       	brne	.+8      	; 0xc0 <_Z5modo1v+0x30>
		PORTD =~(1<<led2);
  b8:	8b ef       	ldi	r24, 0xFB	; 251
  ba:	8b b9       	out	0x0b, r24	; 11
		contadorD2=0;
  bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <contadorD2>
  c0:	08 95       	ret

000000c2 <main>:
void modo2(void);
void pulsadores();

int main(void)
{	
	DDRD |= (1<<led1)|(1<<led2); //Definiendo puertos de los leds como salida
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	84 64       	ori	r24, 0x44	; 68
  c6:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<led1)|(1<<led2)); //  apagar los LEDs inicialmente
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	8b 7b       	andi	r24, 0xBB	; 187
  cc:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0b11001111;
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	87 b9       	out	0x07, r24	; 7
	
	while (1)
	{
		pulsadores();
		if(bModo=1){
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			modo1();
  d8:	0e 94 48 00 	call	0x90	; 0x90 <_Z5modo1v>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	97 e2       	ldi	r25, 0x27	; 39
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x1e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x24>
  e6:	00 00       	nop
  e8:	f4 cf       	rjmp	.-24     	; 0xd2 <main+0x10>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
