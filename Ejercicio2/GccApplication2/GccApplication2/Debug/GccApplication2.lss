
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000018e  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000759  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00000a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032a  00000000  00000000  0000109f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003da  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


int main(void)
{
	//Configuramos el puerto PD como salidas para D1 y D2;
    DDRD |=  ( (1<<D1)   | (1<<D2) );
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	84 64       	ori	r24, 0x44	; 68
  aa:	8a b9       	out	0x0a, r24	; 10
	
	//Configuramos el puerto PC como entradas para BTNA y BTNB;
	DDRC &= ~( (1<<PUL1) | (1<<PUL2) );
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	8f 7c       	andi	r24, 0xCF	; 207
  b0:	87 b9       	out	0x07, r24	; 7
	
    while (1) 
    {
		if(modo==MODO1){
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	a1 f4       	brne	.+40     	; 0xe2 <main+0x3c>
			if(contadorPul1==40){
  ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contadorPul1>
  be:	88 32       	cpi	r24, 0x28	; 40
  c0:	31 f4       	brne	.+12     	; 0xce <main+0x28>
				PORTB ^= (1<<D1);
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	89 27       	eor	r24, r25
  c8:	85 b9       	out	0x05, r24	; 5
				contadorPul1=0;
  ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <contadorPul1>
			}
			if(contadorPul2==70){
  ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  d2:	86 34       	cpi	r24, 0x46	; 70
  d4:	31 f4       	brne	.+12     	; 0xe2 <main+0x3c>
				PORTB ^= (1<<D2);
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	89 27       	eor	r24, r25
  dc:	85 b9       	out	0x05, r24	; 5
				contadorPul2=0;
  de:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			}
		}
		if(modo==MODO2){
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	a1 f4       	brne	.+40     	; 0x112 <main+0x6c>
			if(contadorPul1==90){
  ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contadorPul1>
  ee:	8a 35       	cpi	r24, 0x5A	; 90
  f0:	31 f4       	brne	.+12     	; 0xfe <main+0x58>
				PORTB ^= (1<<D1);
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	89 27       	eor	r24, r25
  f8:	85 b9       	out	0x05, r24	; 5
				contadorPul1=0;
  fa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <contadorPul1>
			}
			if(contadorPul2==20){
  fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 102:	84 31       	cpi	r24, 0x14	; 20
 104:	31 f4       	brne	.+12     	; 0x112 <main+0x6c>
				PORTB ^= (1<<D2);
 106:	95 b1       	in	r25, 0x05	; 5
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	89 27       	eor	r24, r25
 10c:	85 b9       	out	0x05, r24	; 5
				contadorPul2=0;
 10e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			}
		}
		
		
		
		if( getPUL1() == 0 && getPUL2() !=1 ){
 112:	34 99       	sbic	0x06, 4	; 6
 114:	13 c0       	rjmp	.+38     	; 0x13c <main+0x96>
 116:	86 b1       	in	r24, 0x06	; 6
			while(getPUL1() == 0 && getPUL2() !=1);
 118:	34 99       	sbic	0x06, 4	; 6
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x7a>
 11c:	86 b1       	in	r24, 0x06	; 6
 11e:	fc cf       	rjmp	.-8      	; 0x118 <main+0x72>
			if(modo==MODO1){
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	19 f4       	brne	.+6      	; 0x12e <main+0x88>
				modo=MODO2;
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			if(modo==MODO2){
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	19 f4       	brne	.+6      	; 0x13c <main+0x96>
				modo=MODO1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		if( getPUL1() != 0 && getPUL2() == 0){
 13c:	34 9b       	sbis	0x06, 4	; 6
 13e:	14 c0       	rjmp	.+40     	; 0x168 <main+0xc2>
 140:	35 99       	sbic	0x06, 5	; 6
 142:	12 c0       	rjmp	.+36     	; 0x168 <main+0xc2>
			while(getPUL1() != 0 && getPUL2() == 0);
 144:	34 9b       	sbis	0x06, 4	; 6
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0xa6>
 148:	35 9b       	sbis	0x06, 5	; 6
 14a:	fc cf       	rjmp	.-8      	; 0x144 <main+0x9e>
			if(modo==MODO1){
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	19 f4       	brne	.+6      	; 0x15a <main+0xb4>
				modo=MODO2;
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			if(modo==MODO2){
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	19 f4       	brne	.+6      	; 0x168 <main+0xc2>
				modo=MODO1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		
		contadorPul1++;
 168:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contadorPul1>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <contadorPul1>
		contadorPul2++;
 172:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	9e e4       	ldi	r25, 0x4E	; 78
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xda>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xe0>
 186:	00 00       	nop
 188:	94 cf       	rjmp	.-216    	; 0xb2 <main+0xc>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
