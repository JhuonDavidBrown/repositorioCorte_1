
solucion2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b9  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a3  00000000  00000000  00000a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000306  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000405  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008c  00000000  00000000  0000180d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001899  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z5modo1v>:
		}
    }
}
void modo1(void)
{
	if(contadorD1==80){ //0.4s
  90:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contadorD1>
  94:	80 35       	cpi	r24, 0x50	; 80
  96:	21 f4       	brne	.+8      	; 0xa0 <_Z5modo1v+0x10>
		PORTD ^= (1<<led1);
  98:	9b b1       	in	r25, 0x0b	; 11
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	89 27       	eor	r24, r25
  9e:	8b b9       	out	0x0b, r24	; 11
		contadorD1==0;
	}
	if(contadorD2==140){ //0.7s
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	8c 38       	cpi	r24, 0x8C	; 140
  a6:	31 f4       	brne	.+12     	; 0xb4 <_Z5modo1v+0x24>
		PORTD ^=(1<<led2);
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	89 27       	eor	r24, r25
  ae:	8b b9       	out	0x0b, r24	; 11
		contadorD2=0;
  b0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  b4:	08 95       	ret

000000b6 <_Z5modo2v>:
	}
}
void modo2(void)
{
	if(contadorD1==180){ //0.9s
  b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contadorD1>
  ba:	84 3b       	cpi	r24, 0xB4	; 180
  bc:	21 f4       	brne	.+8      	; 0xc6 <_Z5modo2v+0x10>
		PORTD^=(1<<led1);
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	80 e4       	ldi	r24, 0x40	; 64
  c2:	89 27       	eor	r24, r25
  c4:	8b b9       	out	0x0b, r24	; 11
		contadorD1==0;
	}
	if (contadorD2==40){ //0.2s
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	88 32       	cpi	r24, 0x28	; 40
  cc:	31 f4       	brne	.+12     	; 0xda <_Z5modo2v+0x24>
		PORTD^=(1<<led2);
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	89 27       	eor	r24, r25
  d4:	8b b9       	out	0x0b, r24	; 11
		contadorD2=0;
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	08 95       	ret

000000dc <main>:
void modo1(void);
void modo2(void);

int main(void)
{
	DDRD |= (1<<led1)|(1<<led2);
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	84 64       	ori	r24, 0x44	; 68
  e0:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << led1) | (1 << led2)); // Apagar los LEDs al inicio
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8b 7b       	andi	r24, 0xBB	; 187
  e6:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0b11001111;
  e8:	8f ec       	ldi	r24, 0xCF	; 207
  ea:	87 b9       	out	0x07, r24	; 7
    while (1) 
    {
		if((PINC &(1<<pul1))== op)
  ec:	34 99       	sbic	0x06, 4	; 6
  ee:	15 c0       	rjmp	.+42     	; 0x11a <main+0x3e>
		{
			while( (PINC& (1<<pul1))==op){
  f0:	34 99       	sbic	0x06, 4	; 6
  f2:	13 c0       	rjmp	.+38     	; 0x11a <main+0x3e>
		
				modo1();
  f4:	0e 94 48 00 	call	0x90	; 0x90 <_Z5modo1v>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	8f e0       	ldi	r24, 0x0F	; 15
  fa:	97 e2       	ldi	r25, 0x27	; 39
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x20>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x26>
 102:	00 00       	nop
				_delay_ms(5);
				contadorD1++;
 104:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contadorD1>
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <contadorD1>
				contadorD2++;
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	DDRC = 0b11001111;
    while (1) 
    {
		if((PINC &(1<<pul1))== op)
		{
			while( (PINC& (1<<pul1))==op){
 118:	eb cf       	rjmp	.-42     	; 0xf0 <main+0x14>
				contadorD1++;
				contadorD2++;
			}
			 // PORTD^= (1<<led1)|(1<<led2); conmuta cada vez que se pulsa
		}
		if ( (PINC & (1<<pul2)) ==op)
 11a:	35 99       	sbic	0x06, 5	; 6
 11c:	e7 cf       	rjmp	.-50     	; 0xec <main+0x10>
		{
			while( (PINC&(1<<pul2))==op)
 11e:	35 99       	sbic	0x06, 5	; 6
 120:	e5 cf       	rjmp	.-54     	; 0xec <main+0x10>
			{
				modo2();
 122:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z5modo2v>
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	97 e2       	ldi	r25, 0x27	; 39
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x4e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x54>
 130:	00 00       	nop
				_delay_ms(5);
				contadorD1++;
 132:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contadorD1>
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <contadorD1>
				contadorD2++;
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			 // PORTD^= (1<<led1)|(1<<led2); conmuta cada vez que se pulsa
		}
		if ( (PINC & (1<<pul2)) ==op)
		{
			while( (PINC&(1<<pul2))==op)
 146:	eb cf       	rjmp	.-42     	; 0x11e <main+0x42>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
