
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078a  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a3  00000000  00000000  0000099a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b9  00000000  00000000  0000103d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001722  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  88:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z10logicaLed1v>:
char contador=0;


void logicaLed1(void){
	// Parpadeo de LED1
	if(contador==14){ //140 ms
  90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  94:	8e 30       	cpi	r24, 0x0E	; 14
  96:	31 f4       	brne	.+12     	; 0xa4 <_Z10logicaLed1v+0x14>
		PORTD ^= (1 << LED1); // Enciende LED1
  98:	9b b1       	in	r25, 0x0b	; 11
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	89 27       	eor	r24, r25
  9e:	8b b9       	out	0x0b, r24	; 11
		contador=0;
  a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	08 95       	ret

000000a6 <main>:
	}
}

int main(void) {
	
	DDRD |= (1 << LED1) | (1 << LED2);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	84 64       	ori	r24, 0x44	; 68
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1 << PULSADOR); // Make pin 5 of port C as a input
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	8f 7e       	andi	r24, 0xEF	; 239
  b0:	87 b9       	out	0x07, r24	; 7
	
	// Apaga LED1 y LED2 inicialmente;
	PORTD &= ~(1 << LED1);
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8f 7b       	andi	r24, 0xBF	; 191
  b6:	8b b9       	out	0x0b, r24	; 11
	
	while (1) {
		if ( (PINC & (1 << PULSADOR)) == 0){
  b8:	34 99       	sbic	0x06, 4	; 6
  ba:	14 c0       	rjmp	.+40     	; 0xe4 <main+0x3e>
			while( (PINC & (1 << PULSADOR)) == 0  ){
  bc:	34 99       	sbic	0x06, 4	; 6
  be:	0e c0       	rjmp	.+28     	; 0xdc <main+0x36>
				logicaLed1();
  c0:	0e 94 48 00 	call	0x90	; 0x90 <_Z10logicaLed1v>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e1       	ldi	r24, 0x1F	; 31
  c6:	9e e4       	ldi	r25, 0x4E	; 78
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x22>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x28>
  ce:	00 00       	nop
				_delay_ms(10);
				contador++;
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	// Apaga LED1 y LED2 inicialmente;
	PORTD &= ~(1 << LED1);
	
	while (1) {
		if ( (PINC & (1 << PULSADOR)) == 0){
			while( (PINC & (1 << PULSADOR)) == 0  ){
  da:	f0 cf       	rjmp	.-32     	; 0xbc <main+0x16>
				logicaLed1();
				_delay_ms(10);
				contador++;
			}
			PORTD ^= (1 << LED2); //PIN4 of port D is high
  dc:	9b b1       	in	r25, 0x0b	; 11
  de:	84 e0       	ldi	r24, 0x04	; 4
  e0:	89 27       	eor	r24, r25
  e2:	8b b9       	out	0x0b, r24	; 11
		}
		
		logicaLed1();
  e4:	0e 94 48 00 	call	0x90	; 0x90 <_Z10logicaLed1v>
  e8:	8f e1       	ldi	r24, 0x1F	; 31
  ea:	9e e4       	ldi	r25, 0x4E	; 78
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x46>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x4c>
  f2:	00 00       	nop
		_delay_ms(10);
		contador++;
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	DDRC &= ~(1 << PULSADOR); // Make pin 5 of port C as a input
	
	// Apaga LED1 y LED2 inicialmente;
	PORTD &= ~(1 << LED1);
	
	while (1) {
  fe:	dc cf       	rjmp	.-72     	; 0xb8 <main+0x12>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
